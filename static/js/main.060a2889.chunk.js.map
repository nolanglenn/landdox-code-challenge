{"version":3,"sources":["EditTractOwnership/index.js","Icon/index.js","App.js","serviceWorker.js","index.js"],"names":["EditTractOwnership","value","onChange","library","add","faLevelUpAlt","faMinusCircle","faPlus","faSmile","Icon","iconProps","icon","rotation","getIconProps","tractOwnerships","id","uuidv4","owner","interest","lease","npris","App","Container","Row","Col","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAUeA,G,YARY,SAAC,GAAyC,EAAvCC,MAAuC,EAA3BC,SACxC,OACE,sC,sBCMJC,IAAQC,IAAIC,IAAcC,IAAeC,IAAQC,KAEjD,IA8BeC,EANF,SAAC,GAAc,IACpBC,EAzBa,SAAAC,GACnB,OAAQA,GACN,IAAK,MACH,MAAO,CACLA,KAAM,QAEV,IAAK,SACH,MAAO,CACLA,KAAM,eACNC,SAAU,IAEd,IAAK,SACH,MAAO,CACLD,KAAM,gBAEV,IAAK,QACH,MAAO,CACLA,KAAM,SAEV,QACE,MAAO,IAKOE,CADO,EAAXF,MAGd,OAAO,kBAAC,IAAoBD,IC7BxBI,EAAkB,CACtB,CACEC,GAAIC,cACJC,MAAO,iBACPC,SAAU,GACVC,MAAO,iBACPC,MAAO,CACL,CACEL,GAAIC,cACJC,MAAO,cACPC,SAAU,KAEZ,CACEH,GAAIC,cACJC,MAAO,WACPC,SAAU,QA2BHG,MArBf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,sDACyB,kBAAC,EAAD,CAAMd,KAAK,cAK1C,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAoBvB,MAAOa,QCjCjBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.060a2889.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst EditTractOwnership = ({ value = [], onChange = () => { } }) => {\r\n  return (\r\n    <h2>\r\n      TODO\r\n    </h2>\r\n  );\r\n};\r\n\r\nexport default EditTractOwnership;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faLevelUpAlt,\r\n  faMinusCircle,\r\n  faPlus,\r\n  faSmile,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faLevelUpAlt, faMinusCircle, faPlus, faSmile);\r\n\r\nconst getIconProps = icon => {\r\n  switch (icon) {\r\n    case 'add':\r\n      return {\r\n        icon: 'plus',\r\n      };\r\n    case 'indent':\r\n      return {\r\n        icon: 'level-up-alt',\r\n        rotation: 90,\r\n      };\r\n    case 'remove':\r\n      return {\r\n        icon: 'minus-circle',\r\n      };\r\n    case 'smile':\r\n      return {\r\n        icon: 'smile',\r\n      };\r\n    default:\r\n      return {};\r\n  }\r\n};\r\n\r\nconst Icon = ({ icon }) => {\r\n  const iconProps = getIconProps(icon);\r\n\r\n  return <FontAwesomeIcon {...iconProps} />;\r\n};\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport { Col, Container, Jumbotron, Row } from 'react-bootstrap';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\n\r\nimport EditTractOwnership from './EditTractOwnership';\r\nimport Icon from './Icon';\r\n\r\nconst tractOwnerships = [\r\n  {\r\n    id: uuidv4(),\r\n    owner: 'Luke Skywalker',\r\n    interest: 0.5,\r\n    lease: 'Tatooine Lease',\r\n    npris: [\r\n      {\r\n        id: uuidv4(),\r\n        owner: 'Leia Organa',\r\n        interest: 0.45,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        owner: 'Han Solo',\r\n        interest: 0.15,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <Jumbotron>\r\n            <h1>\r\n              Landdox Code Challenge <Icon icon=\"smile\" />\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <EditTractOwnership value={tractOwnerships} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}