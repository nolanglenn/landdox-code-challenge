{"version":3,"sources":["MineralInterest/index.js","EditTractOwnership/index.js","Icon/index.js","App.js","serviceWorker.js","index.js"],"names":["MineralInterest","mineralInterest","index","Form","Row","Col","owner","Button","interest","lease","EditTractOwnership","value","onChange","Control","placeholder","InputGroup","className","FormControl","aria-label","aria-describedby","Append","Text","id","library","add","faLevelUpAlt","faMinusCircle","faPlus","faSmile","Icon","iconProps","icon","rotation","getIconProps","tractOwnerships","uuidv4","npris","App","useState","mineralInterests","Container","Jumbotron","Label","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4c66170.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Form,\n  FormControl,\n  Col,\n  Row,\n  InputGroup,\n  Button,\n} from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction MineralInterest({ mineralInterest, index }) {\n  return (\n    <Form>\n      <Row>\n        <Col>\n          {mineralInterest.owner}\n          <Button>+ Add NPRI</Button>\n        </Col>\n        <Col>{mineralInterest.interest}</Col>\n        <Col></Col>\n        <Col>{mineralInterest.lease}</Col>\n      </Row>\n    </Form>\n  );\n}\n// const MineralInterest = ({ value = [], onChange = () => {} }) => {\n//   return (\n\n//   );\n// };\n\nexport default MineralInterest;\n","import React from 'react';\n\nimport {\n  Form,\n  FormControl,\n  Col,\n  Row,\n  InputGroup,\n  Button,\n} from 'react-bootstrap';\n\nimport MineralInterest from '../MineralInterest';\n\nconst EditTractOwnership = ({ value = [], onChange = () => {} }) => {\n  return (\n    <Form>\n      <Row>\n        <Col>\n          <Form.Control placeholder=\"Name\" />\n        </Col>\n        <Col>\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              placeholder=\"Mineral Interest\"\n              aria-label=\"Mineral Interest\"\n              aria-describedby=\"basic-addon2\"\n            />\n            <InputGroup.Append>\n              <InputGroup.Text id=\"basic-addon2\">%</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Col>\n        <Col></Col>\n        <Col>\n          <Form.Control placeholder=\"Lease\" />\n        </Col>\n      </Row>\n      <Button>Add Mineral Interest</Button>\n    </Form>\n  );\n};\n\nexport default EditTractOwnership;\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faLevelUpAlt,\r\n  faMinusCircle,\r\n  faPlus,\r\n  faSmile,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faLevelUpAlt, faMinusCircle, faPlus, faSmile);\r\n\r\nconst getIconProps = icon => {\r\n  switch (icon) {\r\n    case 'add':\r\n      return {\r\n        icon: 'plus',\r\n      };\r\n    case 'indent':\r\n      return {\r\n        icon: 'level-up-alt',\r\n        rotation: 90,\r\n      };\r\n    case 'remove':\r\n      return {\r\n        icon: 'minus-circle',\r\n      };\r\n    case 'smile':\r\n      return {\r\n        icon: 'smile',\r\n      };\r\n    default:\r\n      return {};\r\n  }\r\n};\r\n\r\nconst Icon = ({ icon }) => {\r\n  const iconProps = getIconProps(icon);\r\n\r\n  return <FontAwesomeIcon {...iconProps} />;\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState } from 'react';\nimport { Col, Container, Jumbotron, Row } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Form } from 'react-bootstrap';\nimport './App.css';\n\nimport EditTractOwnership from './EditTractOwnership';\nimport MineralInterest from './MineralInterest';\nimport Icon from './Icon';\n\nconst tractOwnerships = [\n  {\n    id: uuidv4(),\n    owner: 'Luke Skywalker',\n    interest: 0.5,\n    lease: 'Tatooine Lease',\n    npris: [\n      {\n        id: uuidv4(),\n        owner: 'Leia Organa',\n        interest: 0.45,\n      },\n      {\n        id: uuidv4(),\n        owner: 'Han Solo',\n        interest: 0.15,\n      },\n    ],\n  },\n  {\n    id: uuidv4(),\n    owner: 'Nolan',\n    interest: 0.6,\n    lease: 'Austin',\n    npris: [\n      {\n        id: uuidv4(),\n        owner: 'Leia Organa',\n        interest: 0.45,\n      },\n      {\n        id: uuidv4(),\n        owner: 'Han Solo',\n        interest: 0.15,\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [mineralInterests, setMineralInterests] = useState(tractOwnerships);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Jumbotron>\n            <h1>\n              Landdox Code Challenge <Icon icon=\"smile\" />\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form.Label>Owner</Form.Label>\n        </Col>\n        <Col>\n          <Form.Label>Mineral Interest</Form.Label>\n        </Col>\n        <Col>\n          <Form.Label>NPRI</Form.Label>\n        </Col>\n        <Col>\n          <Form.Label>Lease</Form.Label>\n        </Col>\n      </Row>\n      <hr></hr>\n      <Row>\n        <Col>\n          {mineralInterests.map((mineralInterest, index) => (\n            <MineralInterest\n              key={index}\n              index={index}\n              mineralInterest={mineralInterest}\n            />\n          ))}\n          <EditTractOwnership value={tractOwnerships} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}